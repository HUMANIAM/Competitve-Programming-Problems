										# Greedy Algorithms #
										---------------------
* the main Idea behind the greedy technique is making sure that any move will be safe that means this move will reach you to an optimal
    solution

* but how to make you choice is safe you need to do some computation like sort the input, normalize it, do something that helps you to make
you choices are safe. if you can't find one then this technique will fail and you need to use another one like dp, backtracking, local search
, sat solver ....................................................

* the next problems are training on the greedy technique to master where exactly it can be successful and where it can be failure. I need to
find the main feature of the greedy technique.

* I notice that in every problem greedy algorithm order objects in order where that has max profit come first to choose it first. sometimes
  we don't need order and start move immediately. it is sometimes not save to reach the optimal solution
*/

Reflections on greedy algorithm :
------------------------------
1- you reduce the main problem to other problem that you can use the same technique (greed) to solve it
	in the first example below you can say with GreatestNumber(9, 1, 2, 3) that 
	soution = 9 + GreatestNumber(1, 2, 3) GreatestNumber is a new subproblem and you can solve it with the 
	same technique

2- Greedy Choice is called (Save move) if and only if there is an optimal solution consistent with this 
	first move and not all first moves are safe where often greedy moves are not safe
	so you must follow these steps to make sure your solution is correct
	* make greedy move  * proof it is safe  * reduce to subproblem  * solve the subproblem
Examples:
--------
1- Find max number from list of digits: find max digit in the list remove it from the list then append it 
	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   the number

2- car fueling : Input: A car which can travel at most L kilometers with full tank, a source
   ^^^^^^^^^^^	  ****  point A, a destination point B and n gas stations at distances
						x1 ≤ x2 ≤ x3 ≤ · · · ≤ xn in kilometers from A along the path from A to B

				 output : The minimum number of refills to get from A to B, besides refill at A
				 ******

				 intuitive thinking : at every gas station check if the fuel in car can reach you to the 
				 ******************	  next gas station or not if not fuel and do some computation then go

3- Group children : Many children came to a celebration. Organize them into the minimum possible number 
	^^^^^^^^^^^^^	of groups such that the age of any two children in the same group diffeer by at most 				one year.

					intuitive solution : make every student in one group then take one this results in time
										omega(2^n) lower limit where there is 2^n groups and you need to choose the valid ones without make a student in 2 groups

					efficient algorith : you can reformulate the to anthor problem whicht will be (find 					 the minimum number of segments of unit length to cover all points 						in a line) put the children into line then sort 
										them and apply the constraint to group them this will take 
										O(nlog(n)) for sorting and O(n) for the greedy algorithm 

4- Fractional knapsack : Input: Weights w1, . . . , wn and values v1, . . . , vn of n items; capacity W .
	^^^^^^^^^^^^^^^^^   Output: The maximum total value of fractions of items that fit into a bag of 								capacity W .

						intuitive solution : sort Vi/Wi and select in a greedy way ther greater one by the 						greater one. complexity time is O(nlog(n))







